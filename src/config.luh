@
if args.blocksize % 2 ~= 0 then
    emit('#error "blocksize must be even"\n')
end
upsamplers = {}
downsamplers = {}
for _,grid in pairs(args.grids) do
    if upsamplers[grid.upsample] ~= nil and upsamplers[grid.upsample] ~= grid.datatype then
        emit('#error "conflicting datatype specifications for ' .. grid.upsample .. '"\n')
    end
    if downsamplers[grid.downsample] ~= nil and downsamplers[grid.downsample] ~= grid.datatype then
        emit('#error "conflicting datatype specifications for ' .. grid.dpwnsample .. '"\n')
    end
    if upsamplers[grid.downsample] ~= nil then
        emit('#error "' .. grid.downsample .. ' specified as both up and downsampler\n')
    end
    if downsamplers[grid.upsample] ~= nil then
        emit('#error "' .. grid.upsample .. ' specified as both up and downsampler\n')
    end
    upsamplers[grid.upsample] = grid.datatype
    downsamplers[grid.downsample] = grid.datatype
end@
#pragma once

#include <stdbool.h>
#include <stddef.h>
#include <stdlib.h>
#include <assert.h>

#include <util.h>

#define DIM @emit(args.dim)@
#define TREECH @emit(math.floor(2^args.dim))@
#define BLOCKSIZE @emit(args.blocksize)@
#define BLOCKMEMSIZE @emit(math.floor(args.blocksize^args.dim))@
#define ADJNUM @emit(math.floor(3^args.dim))@

#define DOWNSAMPLE_FUNC(name, datatype) \
static inline void name(@
    for i=1,math.floor(2^args.dim) do
        emit('datatype *x' .. i .. ', ')
    end
    emit('datatype *y')@)

#define UPSAMPLE_FUNC(name, datatype) \
static inline void name(@
    emit('datatype *x')
    for i=1,math.floor(2^args.dim) do
        emit(', datatype *y' .. i)
    end@)

@
local i = 0
for name,grid in pairs(args.grids) do
    emiti{'#define GRID_'..name..' $i\n', i=i}
    emiti{'typedef $datatype '..name..'_data_t;\n', datatype=grid.datatype}
    i = i+1
end
emiti{'#define GRIDNUM $i\n', i=i}
@

#define CELL(data, grid@emitn(args.dim, ', x$n')@) \
GET(CONCAT(grid, _data_t), data[CONCAT(GRID_, grid)].source@emitn(args.dim, ', x$n')@)

#define KERNEL_FUNC(name, datatype) \
static inline datatype name(int *action, ArrayPair data[GRIDNUM]@
    for i=1,args.dim do
        emit(', uint64_t x$1', i)
    end@)
